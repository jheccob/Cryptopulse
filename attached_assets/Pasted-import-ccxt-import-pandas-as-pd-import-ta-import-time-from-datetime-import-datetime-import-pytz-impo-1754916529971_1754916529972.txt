import ccxt from "ccxt";
import TelegramBot from "node-telegram-bot-api";

// ===== CONFIGURAÇÕES =====
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || "SEU_TOKEN_AQUI";
const CHAT_ID = process.env.CHAT_ID || "SEU_CHAT_ID_AQUI";

const SYMBOL = "XLM/USDT";
const TIMEFRAME = "5m";

const MACD_FAST = 8;
const MACD_SLOW = 17;
const MACD_SIGNAL = 9;
const RSI_PERIOD = 9;
const RSI_MIN = 20;
const RSI_MAX = 80;
const VOLUME_MA = 20;

const exchange = new ccxt.binance({ enableRateLimit: true });
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// ===== FUNÇÕES =====
async function getOHLCV(symbol, limit = 200) {
  const data = await exchange.fetchOHLCV(symbol, TIMEFRAME, undefined, limit);
  return data.map(([timestamp, open, high, low, close, volume]) => ({
    timestamp: new Date(timestamp),
    open,
    high,
    low,
    close,
    volume,
  }));
}

function calculateIndicators(df) {
  // Implementação simplificada: só exemplo
  const closes = df.map(c => c.close);

  // RSI (básico)
  function rsi(values, period = 14) {
    let gains = 0, losses = 0;
    for (let i = 1; i <= period; i++) {
      const diff = values[i] - values[i - 1];
      if (diff >= 0) gains += diff; else losses -= diff;
    }
    const rs = gains / (losses || 1);
    return 100 - 100 / (1 + rs);
  }

  df[df.length - 1].rsi = rsi(closes, RSI_PERIOD);
  return df;
}

function checkSignal(df) {
  const last = df[df.length - 1];
  if (!last.rsi) return null;

  if (last.rsi > RSI_MIN && last.rsi < RSI_MAX) {
    if (last.rsi > 60) return "COMPRA";
    if (last.rsi < 40) return "VENDA";
  }
  return "NEUTRO";
}

// ===== LOOP AUTOMÁTICO =====
async function autoLoop() {
  try {
    const df = await getOHLCV(SYMBOL, 200);
    const withIndicators = calculateIndicators(df);
    const signal = checkSignal(withIndicators);
    if (signal && signal !== "NEUTRO") {
      const price = withIndicators[withIndicators.length - 1].close;
      const msg = `🚨 SINAL ${signal}\nPar: ${SYMBOL}\n💰 Preço: ${price}`;
      bot.sendMessage(CHAT_ID, msg);
      console.log(msg);
    }
  } catch (e) {
    console.error("Erro no loop:", e.message);
  }
}

// roda automático a cada 1 min
setInterval(autoLoop, 60 * 1000);

// ===== COMANDOS MANUAIS =====
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, "🤖 Olá! Eu sou seu bot de sinais.\n\nUse:\n`/signal BTC/USDT` → analisa uma moeda\n`/status` → mostra o que estou monitorando.");
});

bot.onText(/\/status/, (msg) => {
  bot.sendMessage(msg.chat.id, `Atualmente monitorando: ${SYMBOL} no timeframe ${TIMEFRAME}`);
});

bot.onText(/\/signal (.+)/, async (msg, match) => {
  const symbol = match[1].toUpperCase();
  try {
    const df = await getOHLCV(symbol, 200);
    const withIndicators = calculateIndicators(df);
    const signal = checkSignal(withIndicators);
    const price = withIndicators[withIndicators.length - 1].close;
    bot.sendMessage(msg.chat.id, `📊 Análise de ${symbol}\n💰 Preço: ${price}\nSinal: ${signal}`);
  } catch (e) {
    bot.sendMessage(msg.chat.id, `Erro ao analisar ${symbol}: ${e.message}`);
  }
});
